###########################################################################
###########################################################################
###########################################################################
###########                                                     ###########
###########                  SPECTRAL SYPHON                    ###########
###########                   Packet sniffer                    ###########
###########                    Version 1.0                      ###########
###########                                                     ###########
###########               PROIECT DE DISERTATIE                 ###########
###########         Author: Ion-Margarit Adrian-Florin          ###########
###########       Facultatea de Matematica si Informatica       ###########
###########             Universitatea din Bucuresti             ###########
###########                                                     ###########
###########################################################################
###########################################################################
###########################################################################

import shodan
import requests
import time
import sys
from colorama import Fore, Back, Style


def vulnerability_scanner(host, api_key):
    try:
        print(
            f"{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} Vulnerability scanner started on {Style.RESET_ALL}{Fore.CYAN}{host}{Style.RESET_ALL}{Fore.RED}...{Style.RESET_ALL}"
        )
        target = host
        api = shodan.Shodan(api_key)
        dnsResolve = (
            f"http://api.shodan.io/dns/resolve?hostnames={target}&key={api_key}"
        )

        # Resolving target DNS to get the host IP
        resolved = requests.get(dnsResolve)
        hostIP = resolved.json()[target]

        # Using Shodan to obtain the host information
        host = api.host(hostIP)
        print(
            f"{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} Target: {Style.RESET_ALL}{Fore.CYAN}{target}{Style.RESET_ALL}"
        )
        print(
            f"{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} IP: {Style.RESET_ALL}{Fore.CYAN}{host['ip_str']}{Style.RESET_ALL}"
        )
        print(
            f'{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} Organization: {Style.RESET_ALL}{Fore.CYAN}{host.get("org", "n/a")}{Style.RESET_ALL}'
        )
        print(
            f'{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} Operating System: {Style.RESET_ALL}{Fore.CYAN}{host.get("os", "n/a")}{Style.RESET_ALL}\n'
        )

        # Printing all the ports and banners
        for item in host["data"]:
            print(
                f'{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} Port: {Style.RESET_ALL}{Fore.CYAN}{item["port"]}{Style.RESET_ALL}'
            )
            print(
                f'{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} Banner: {Style.RESET_ALL}{Fore.CYAN}{item["data"]}{Style.RESET_ALL}\n'
            )

        # Printing all the vulnerabilities
        if "vulns" in host and len(host["vulns"]) > 0:
            print(
                f'{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} Vulnerabilities found on {Style.RESET_ALL}{Fore.CYAN}{target}{Style.RESET_ALL}{Fore.RED}:{Style.RESET_ALL} {Fore.CYAN}{len(host["vulns"])}{Style.RESET_ALL}'
            )

            for item in host["vulns"]:
                CVE = item.replace("!", "")
                print(
                    f"{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} CVE: {Style.RESET_ALL}{Fore.CYAN}{CVE}{Style.RESET_ALL}"
                )
                print(
                    f'{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} CVSS: {Style.RESET_ALL}{Fore.CYAN}{host["vulns"][item]["cvss"]}{Style.RESET_ALL}'
                )
                print(
                    f"{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} Vulnerability: {Style.RESET_ALL}{Fore.CYAN}{item}{Style.RESET_ALL}"
                )
                print(
                    f'{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} Details: {Style.RESET_ALL}{Fore.CYAN}{host["vulns"][item]["summary"]}{Style.RESET_ALL}\n'
                )

                # Waiting for 1 second
                time.sleep(1)

                # Searching for exploits
                exploits = api.exploits.search(CVE)

                for item in exploits["matches"]:
                    print(item.get("description"))

            print("\n")

        else:
            print(
                f"{Fore.GREEN}[+++]{Style.RESET_ALL}{Fore.RED} No vulnerabilities found on {Style.RESET_ALL}{Fore.CYAN}{target}{Style.RESET_ALL}{Fore.RED}.{Style.RESET_ALL}\n"
            )

    except KeyboardInterrupt:
        sys.exit("^C\n")

    except Exception as e:
        print(f"{Fore.RED}[!!!] Error: {e}{Style.RESET_ALL}\n")
